@page "/dashboard"
@using System.Globalization
@inject NavigationManager Navigation


<PageTitle>My Accounts - Dashboard</PageTitle>

<link href="/css/dashBoard.css" rel="stylesheet" />

<div class="dashboard-container">
    <div class="header">
        <div class="logo">
            <div class="logo-icon">$</div>
        </div>
        <nav class="nav-menu">
            <button class="nav-btn @(activeTab == "Exchange" ? "active" : "")" @onclick="@(() => SetActiveTab("Exchange"))">
                Exchange
            </button>
            <button class="nav-btn @(activeTab == "MyAccounts" ? "active" : "")" @onclick="@(() => SetActiveTab("MyAccounts"))">
                My Accounts
            </button>
            <button class="nav-btn @(activeTab == "History" ? "active" : "")" @onclick="@(() => SetActiveTab("History"))">
                History
            </button>
            <button class="nav-btn @(activeTab == "Settings" ? "active" : "")" @onclick="@(() => SetActiveTab("Settings"))">
                Settings
            </button>
            <button class="nav-btn logout" @onclick="HandleLogout">
                Log Out
            </button>
        </nav>
    </div>

    <div class="main-content">
        @if (activeTab == "MyAccounts")
        {
            <div class="accounts-section">
                <div class="accounts-header">
                    <div class="sort-container">
                        <label for="sort-select">Sortuj</label>
                        <select id="sort-select" @onchange="HandleSortChange" class="sort-select">
                            <option value="currency">Currency</option>
                            <option value="balance">Balance</option>
                            <option value="account">Account Number</option>
                        </select>
                    </div>
                    <button class="btn btn-primary" @onclick="ShowCreateAccountModal">
                        Create new Bank account
                    </button>
                </div>

                <div class="accounts-list">
                    @foreach (var account in GetSortedAccounts())
                    {
                        <div class="account-row">
                            <div class="account-info">
                                <div class="currency-code">@account.Currency</div>
                                <div class="balance">@account.Balance.ToString("N2", CultureInfo.InvariantCulture)</div>
                            </div>
                            <div class="account-number">@account.AccountNumber</div>
                            <div class="account-actions">
                                <button class="btn-icon" @onclick="() => EditAccount(account)" title="Edit Account">
                                    ⚙️
                                </button>
                            </div>
                        </div>
                    }
                </div>

                <div class="account-actions-footer">
                    <button class="btn btn-secondary" @onclick="ShowAddFundsModal">Add Funds</button>
                    <button class="btn btn-secondary" @onclick="ShowCashOutModal">Cash out</button>
                </div>
            </div>
        }
        else if (activeTab == "Exchange")
        {
            <div class="exchange-section">
                <h2>Currency Exchange</h2>
                <p>Exchange functionality will be implemented here.</p>
            </div>
        }
        else if (activeTab == "History")
        {
            <div class="history-section">
                <h2>Transaction History</h2>
                <p>Transaction history will be displayed here.</p>
            </div>
        }
        else if (activeTab == "Settings")
        {
            <div class="settings-section">
                <h2>Account Settings</h2>
                <p>Account settings will be available here.</p>
            </div>
        }
    </div>
</div>

<!-- Create Account Modal -->
@if (showCreateAccountModal)
{
    <div class="modal-overlay" @onclick="CloseCreateAccountModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>Create New Bank Account</h3>
                <button class="modal-close" @onclick="CloseCreateAccountModal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Currency</label>
                    <select @bind="newAccountCurrency" class="form-select">
                        <option value="">Select Currency</option>
                        <option value="USD">USD - US Dollar</option>
                        <option value="EUR">EUR - Euro</option>
                        <option value="PLN">PLN - Polish Zloty</option>
                        <option value="GBP">GBP - British Pound</option>
                        <option value="CNY">CNY - Chinese Yuan</option>
                        <option value="NOK">NOK - Norwegian Krone</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Initial Balance (Optional)</label>
                    <input type="number" @bind="newAccountBalance" class="form-input" placeholder="0.00" step="0.01" min="0" />
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseCreateAccountModal">Cancel</button>
                <button class="btn btn-primary" @onclick="CreateNewAccount" disabled="@string.IsNullOrEmpty(newAccountCurrency)">
                    Create Account
                </button>
            </div>
        </div>
    </div>
}

@code {
    private string activeTab = "MyAccounts";
    private string sortBy = "currency";
    private bool showCreateAccountModal = false;
    private string newAccountCurrency = string.Empty;
    private decimal newAccountBalance = 0;

    private List<BankAccount> accounts = new()
    {
        new BankAccount { Currency = "PLN", Balance = 159.99m, AccountNumber = "03 7483 9405 9382 7028 3944 7876" },
        new BankAccount { Currency = "USD", Balance = 70.88m, AccountNumber = "03 6666 0978 6666 2456 3944 7450" },
        new BankAccount { Currency = "EUR", Balance = 13.20m, AccountNumber = "42 2222 9405 9382 3337 3944 2789" },
        new BankAccount { Currency = "CNY", Balance = 999.12m, AccountNumber = "33 7483 6789 9382 6543 5555 0000" },
        new BankAccount { Currency = "NOK", Balance = 0.00m, AccountNumber = "11 3456 3477 777 7654 3944 5467" }
    };

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
    }

    private void HandleSortChange(ChangeEventArgs e)
    {
        sortBy = e.Value?.ToString() ?? "currency";
    }

    private IEnumerable<BankAccount> GetSortedAccounts()
    {
        return sortBy switch
        {
            "balance" => accounts.OrderByDescending(a => a.Balance),
            "account" => accounts.OrderBy(a => a.AccountNumber),
            _ => accounts.OrderBy(a => a.Currency)
        };
    }

    private void ShowCreateAccountModal()
    {
        showCreateAccountModal = true;
        newAccountCurrency = string.Empty;
        newAccountBalance = 0;
    }

    private void CloseCreateAccountModal()
    {
        showCreateAccountModal = false;
    }

    private void CreateNewAccount()
    {
        if (!string.IsNullOrEmpty(newAccountCurrency))
        {
            var random = new Random();
            var newAccount = new BankAccount
            {
                Currency = newAccountCurrency,
                Balance = newAccountBalance,
                AccountNumber = GenerateAccountNumber(random)
            };

            accounts.Add(newAccount);
            CloseCreateAccountModal();
        }
    }

    private string GenerateAccountNumber(Random random)
    {
        // Generate a realistic-looking account number
        var parts = new string[6];
        parts[0] = random.Next(10, 99).ToString();
        for (int i = 1; i < 6; i++)
        {
            parts[i] = random.Next(1000, 9999).ToString();
        }
        return string.Join(" ", parts);
    }

    private void EditAccount(BankAccount account)
    {
        // Implement account editing logic
        Console.WriteLine($"Edit account: {account.Currency} - {account.AccountNumber}");
    }

    private void ShowAddFundsModal()
    {
        // Implement add funds functionality
        Console.WriteLine("Show add funds modal");
    }

    private void ShowCashOutModal()
    {
        // Implement cash out functionality
        Console.WriteLine("Show cash out modal");
    }

    private void HandleLogout()
    {
        // Implement logout logic
        Navigation.NavigateTo("/login");
    }

    public class BankAccount
    {
        public string Currency { get; set; } = string.Empty;
        public decimal Balance { get; set; }
        public string AccountNumber { get; set; } = string.Empty;
    }
}